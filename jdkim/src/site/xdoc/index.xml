<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- 
	/****************************************************************
	* Licensed to the Apache Software Foundation (ASF) under one   *
	* or more contributor license agreements.  See the NOTICE file *
	* distributed with this work for additional information        *
	* regarding copyright ownership.  The ASF licenses this file   *
	* to you under the Apache License, Version 2.0 (the            *
	* "License"); you may not use this file except in compliance   *
	* with the License.  You may obtain a copy of the License at   *
	*                                                              *
	*   http://www.apache.org/licenses/LICENSE-2.0                 *
	*                                                              *
	* Unless required by applicable law or agreed to in writing,   *
	* software distributed under the License is distributed on an  *
	* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
	* KIND, either express or implied.  See the License for the    *
	* specific language governing permissions and limitations      *
	* under the License.                                           *
	****************************************************************/
	
-->
<document>
	<properties>
		<title>jDKIM</title>
	</properties>
	<body>
		<section name="Apache jDKIM Project">
			<p>
				jDKIM is a DKIM implementation library written in Java.
				It provides both verification and signing and also
				provides Mailets for the Apache JAMES project.
			</p>
		
			<p>
				The 0.2 release is the first release. It requires Java 1.5 at
				runtime and it requires the JVM running the library to support
				SHA256withRSA cypher suite. The default Sun Java 1.5 does support this
				suite. If your JVM doesn't support it you can install a third party
				cryptography provider like BouncyCastle and configure it appropriately
				in your JVM.
			</p>
		
			<p>
				The architecture is thought to handle multiple signatures with
				performance in mind: body hashing for multiple signatures is computed
				concurrently in a single stream run.
			</p>
		
			<p>
				The whole internal verification/signing is done via OutputStream
				leaving much more flexibility than the use of InputStream. As the
				InputStream approach is easier from the user side the default
				implementation simply prepare the OutputStream and copy the supplied
				InputStream to the OutputStream.
			</p>
			
			<p>
				Please make sure you use dnsjava <strong>2.0.7 or greater</strong>
				as 2.0.6 and previous versions don't handle correctly some TXT 
				record escaping that are very common in DKIM public key records.
				Failure to include such an updated dnsjava will prevent jDKIM
				from correctly verify signatures.
			</p>

			<p>
				The product currently include a generic library module
				called "main" and a module providing mailets for DKIM
				signing
			</p>
		</section>
	</body>
</document>
